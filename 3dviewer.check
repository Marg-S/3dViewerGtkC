  #include <check.h>

#include "3dviewer.h"

#define EPSILON 1e-7

char file_cube[100] = "models/cube.obj";
char file_pyramid[100] = "models/pyramid.obj";
char file_cube_commas[100] = "models/cube_commas.obj";
char file_cube_uncentered[100] = "models/cube_uncentered.obj";
char file_nonexistent[100] = "models/nonexistent.obj";
char file_parsing_error[100] = "models/parsing_error.obj";

#test load_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};
  int expected_faces[24] = {1, 5, 7, 3, 4, 3, 7, 8, 8, 7, 5, 6,
                            6, 2, 4, 8, 2, 1, 3, 4, 6, 5, 1, 2};

  int error_code = load_model(file_cube, &model);

  ck_assert_int_eq(error_code, OK);
  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }
  for (int i = 0; i < 24; i++) {
    ck_assert_int_eq(model.faces[i], expected_faces[i]);
  }

  free_model(&model);
}

#test load_model_commas
{
  Model1 model = {0};
  double expected_vertices[24] = {
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube_commas, &model);

  ck_assert_int_eq(error_code, OK);
  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test load_model_parsing_error
{
  Model1 model = {0};

  int error_code = load_model(file_parsing_error, &model);

  ck_assert_int_eq(error_code, ERROR);

  free_model(&model);
}

#test translate_to_origin_no_translation
{
  Model1 model = {0};
  double expected_vertices[24] = {
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  translate_to_origin(&model);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test translate_to_origin_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube_uncentered, &model);

  translate_to_origin(&model);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_lt(fabs(model.vertices[i] - expected_vertices[i]),
                        EPSILON);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test scale_test_1
{
  Model1 model = {0};
  double expected_vertices[24] = {
      0.500000,  0.500000, -0.500000, 0.500000,  -0.500000, -0.500000,
      0.500000,  0.500000, 0.500000,  0.500000,  -0.500000, 0.500000,
      -0.500000, 0.500000, -0.500000, -0.500000, -0.500000, -0.500000,
      -0.500000, 0.500000, 0.500000,  -0.500000, -0.500000, 0.5000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  scale1(&model);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test scale_test_2
{
  Model1 model = {0};
  double expected_vertices[24] = {0.0,  0.5, 0.0, -0.5, 0.0,  -0.5, 0.5, 0.0,
                                  -0.5, 0.5, 0.0, 0.5,  -0.5, 0.0,  0.5};
  int expected_num_vertices_in_polygon[8] = {3, 1, 1, 3, 3, 3, 3, 3};
  int expected_faces[20] = {1, 2, 3, 1, 1, 1, 3, 4, 1, 4,
                            5, 1, 5, 2, 3, 2, 4, 2, 5, 4};

  int error_code = load_model(file_pyramid, &model);
  scale1(&model);

  ck_assert_int_eq(model.face_count, 20);
  ck_assert_int_eq(model.vertex_count, 5);
  ck_assert_int_eq(model.polygon_count, 8);
  for (int i = 0; i < 5 * 3; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 8; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }
  for (int i = 0; i < 20; i++) {
    ck_assert_int_eq(model.faces[i], expected_faces[i]);
  }

  free_model(&model);
}

#test translate_x_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      2.000000, 1.000000, -1.000000, 2.000000, -1.000000, -1.000000,
      2.000000, 1.000000, 1.000000,  2.000000, -1.000000, 1.000000,
      0.000000, 1.000000, -1.000000, 0.000000, -1.000000, -1.000000,
      0.000000, 1.000000, 1.000000,  0.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_translation_matrix(1, 0, 0);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test translate_xyz_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      2.000000, 3.000000, 2.000000, 2.000000, 1.000000, 2.000000,
      2.000000, 3.000000, 4.000000, 2.000000, 1.000000, 4.000000,
      0.000000, 3.000000, 2.000000, 0.000000, 1.000000, 2.000000,
      0.000000, 3.000000, 4.000000, 0.000000, 1.000000, 4.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_translation_matrix(1, 2, 3);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_eq(model.vertices[i], expected_vertices[i]);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test rotate_x_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_rotation_matrix_x(360);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_lt(fabs(model.vertices[i] - expected_vertices[i]),
                        EPSILON);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test rotate_y_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      -1.000000, 1.000000, 1.000000,  -1.000000, -1.000000, 1.000000,
      -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000,
      1.000000,  1.000000, 1.000000,  1.000000,  -1.000000, 1.000000,
      1.000000,  1.000000, -1.000000, 1.000000,  -1.000000, -1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_rotation_matrix_y(180);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_lt(fabs(model.vertices[i] - expected_vertices[i]),
                        EPSILON);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test rotate_z_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      -1.000000, 1.000000,  -1.000000, 1.000000, 1.000000,  -1.000000,
      -1.000000, 1.000000,  1.000000,  1.000000, 1.000000,  1.000000,
      -1.000000, -1.000000, -1.000000, 1.000000, -1.000000, -1.000000,
      -1.000000, -1.000000, 1.000000,  1.000000, -1.000000, 1.000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_rotation_matrix_z(90);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_lt(fabs(model.vertices[i] - expected_vertices[i]),
                        EPSILON);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test scale_model_test
{
  Model1 model = {0};
  double expected_vertices[24] = {
      0.1000000,  0.1000000, -0.1000000, 0.1000000,  -0.1000000, -0.1000000,
      0.1000000,  0.1000000, 0.1000000,  0.1000000,  -0.1000000, 0.1000000,
      -0.1000000, 0.1000000, -0.1000000, -0.1000000, -0.1000000, -0.1000000,
      -0.1000000, 0.1000000, 0.1000000,  -0.1000000, -0.1000000, 0.1000000};
  int expected_num_vertices_in_polygon[6] = {4, 4, 4, 4, 4, 4};

  int error_code = load_model(file_cube, &model);
  Matrix matrix = create_scale_matrix(0.1);
  modify_model(&model, matrix);

  ck_assert_int_eq(model.face_count, 6 * 4);
  ck_assert_int_eq(model.vertex_count, 8);
  ck_assert_int_eq(model.polygon_count, 6);
  for (int i = 0; i < 24; i++) {
    ck_assert_double_lt(fabs(model.vertices[i] - expected_vertices[i]),
                        EPSILON);
  }
  for (int i = 0; i < 6; i++) {
    ck_assert_int_eq(model.num_vertices_in_polygon[i],
                     expected_num_vertices_in_polygon[i]);
  }

  free_model(&model);
}

#test load_nonexistent_file
{
  Model1 model = {0};

  int error_code = load_model(file_nonexistent, &model);

  ck_assert_int_eq(error_code, ERROR);

  free_model(&model);
}